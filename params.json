{"name":"Geous.js","tagline":"Javascript Geolocation made easy","google":"UA-34633803-1","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Geous.js\r\n===============\r\n\r\nJavascript geolocation and geocoding made easy.\r\n\r\nOverview\r\n--------\r\n\r\nGeous provides several useful tools for simplifying location-based tasks and a common format for handling their results.\r\n\r\n###geous.Location\r\n\r\nGeous `Location` objects are the basic currency of Geous operations, and may be constructed from a variety of formats. All of the following are valid:\r\n\r\n    // copy constructor\r\n    new geous.Location(new geous.Location());\r\n\r\n    // address string\r\n    new geous.Location('123 abc st, akron, ohio');\r\n\r\n    // address components\r\n    new geous.Location(['123 abc st', 'akron', 'ohio']);\r\n    new geous.Location({city: 'akron', state: 'ohio'});\r\n\r\n    // lat/lng coordinates\r\n    new geous.Location(48.3689, -99.9962);\r\n    new geous.Location([48.3689, -99.9962]);\r\n    new geous.Location({lat: 48.3689, lng: -99.9962});\r\n\r\nThe `setAddress` and `setCoordinates` methods used by the constructor may also be used to assign location components to an existing `geous.Location`:\r\n\r\n    var location = new geous.Location();\r\n\r\n    location.setAddress({city: 'akron', state: 'ohio'});\r\n    console.log(location.city, location.state);\r\n\r\n    location.setCoordinates(48.3689, -99.9962);\r\n    console.log(location.coords);\r\n\r\n###geous.geocode\r\n\r\nGeous provides a catch-all method for converting between various location formats. \r\n\r\n    var location = new geous.Location({ city: 'Truckee', state: 'CA' });\r\n\r\n    geous.geocode(location, {\r\n        error: function () {\r\n            alert('well, that didn\\'t work out!');\r\n        },\r\n        success: function (location) {\r\n            console.log(location.coords);\r\n        }\r\n    });\r\n\r\nBesides supporting `success` and `error` callbacks, the geocoder may be used to reverse-geocode a lat-lng pair by specifiying `{ reverse: true }`.\r\n\r\n    var location = new geous.Location(48.3689, -99.9962);\r\n\r\n    geous.geocode(location, {\r\n        reverse: true,\r\n        success: function (location) {\r\n            console.log(location);\r\n        }\r\n    });\r\n\r\nPrior to calling `geous.geocode`, an alternative geocoder may be assigned using `geous.configure()`:\r\n\r\n    geous.configure({\r\n        geocoder: 'google'\r\n    });\r\n\r\n\r\n###geous.getUserLocation\r\n\r\nA wrapper for the HTML5 location API that will return a Geous Location. `success` and `error` callbacks may be provided as options to handle the corresponding events:\r\n\r\n    geous.getUserLocation({\r\n        error: function () {\r\n            console.log('Something terrible has happened!');\r\n        },\r\n        success: function (location) {\r\n            console.log('User is at: ', location.coords);\r\n        }\r\n    });\r\n\r\nAdding `geocode: true` to the options hash will instruct geous to attempt to geocode the user's location.\r\n\r\n    geous.getUserLocation({\r\n        geocode: true,\r\n        success: function (location) {\r\n            console.log('Geocoded location:', location.toAddress());\r\n        }\r\n    });\r\n\r\nLicense\r\n----------------\r\n\r\ngeous.js is released under the JSON License. You can read the license [here](http://www.json.org/license.html)\r\n"}